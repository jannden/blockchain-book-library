/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NftMarketplaceV2Interface extends utils.Interface {
  functions: {
    "addCollection(address)": FunctionFragment;
    "buyItem(address,uint256)": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "listItem(address,uint256,uint256)": FunctionFragment;
    "listingFee()": FunctionFragment;
    "listings(address,uint256)": FunctionFragment;
    "nfts(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setListingFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollection"
      | "buyItem"
      | "cancelListing"
      | "listItem"
      | "listingFee"
      | "listings"
      | "nfts"
      | "owner"
      | "renounceOwnership"
      | "setListingFee"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nfts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setListingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CollectionAdded(address,address)": EventFragment;
    "ItemBought(address,address,uint256,uint256)": EventFragment;
    "ItemCanceled(address,address,uint256)": EventFragment;
    "ItemListed(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CollectionAddedEventObject {
  deployer: string;
  nftAddress: string;
}
export type CollectionAddedEvent = TypedEvent<
  [string, string],
  CollectionAddedEventObject
>;

export type CollectionAddedEventFilter = TypedEventFilter<CollectionAddedEvent>;

export interface ItemBoughtEventObject {
  buyer: string;
  nftAddress: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type ItemBoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ItemBoughtEventObject
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export interface ItemCanceledEventObject {
  seller: string;
  nftAddress: string;
  tokenId: BigNumber;
}
export type ItemCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  ItemCanceledEventObject
>;

export type ItemCanceledEventFilter = TypedEventFilter<ItemCanceledEvent>;

export interface ItemListedEventObject {
  seller: string;
  nftAddress: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type ItemListedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NftMarketplaceV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMarketplaceV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollection(
      _nftAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    listingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nfts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setListingFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addCollection(
    _nftAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyItem(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelListing(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  listItem(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  listingFee(overrides?: CallOverrides): Promise<BigNumber>;

  listings(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nfts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setListingFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollection(
      _nftAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nfts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setListingFee(
      _newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollectionAdded(address,address)"(
      deployer?: string | null,
      nftAddress?: string | null
    ): CollectionAddedEventFilter;
    CollectionAdded(
      deployer?: string | null,
      nftAddress?: string | null
    ): CollectionAddedEventFilter;

    "ItemBought(address,address,uint256,uint256)"(
      buyer?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      buyer?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ItemBoughtEventFilter;

    "ItemCanceled(address,address,uint256)"(
      seller?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null
    ): ItemCanceledEventFilter;
    ItemCanceled(
      seller?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null
    ): ItemCanceledEventFilter;

    "ItemListed(address,address,uint256,uint256)"(
      seller?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ItemListedEventFilter;
    ItemListed(
      seller?: string | null,
      nftAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): ItemListedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addCollection(
      _nftAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nfts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setListingFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollection(
      _nftAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    listingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setListingFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
